---
title: "LeetCode-17. Letter Combinations of a Phone Number"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

![img](http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png)

**Example:**

```
Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
```

**Note:**

Although the above answer is in lexicographical order, your answer could be in any order you want.

#### 思路

求电话号码的字母组合，即数字2到9中每个数字可以代表若干个字母，然后给一串数字，求出所有可能的组合。用递归Recursion来解，需要建立一个字典，用来保存每个数字所代表的字符串，然后还需要一个变量level，记录当前生成的字符串的字符个数，在递归函数中首先判断level，如果跟digits中数字的个数相等，将当前的组合加入结果res中，然后返回。否则，通过digits中的数字到dict中取出字符串，然后遍历这个取出的字符串，将每个字符都加到当前的组合后面，并调用递归函数即可

- 解法1

  ```c++
  class Solution {
  public:
      vector<string> letterCombinations(string digits) {
          if(digits.empty())
              return {};
          vector<string> res;
          string dict[] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
          letterCombinationsDFS(digits, dict, 0, "", res);
          return res;
      }
      
      void letterCombinationsDFS(string digits, string dict[], int level, string out, vector<string>& res){
          if(level == digits.size()){
              res.push_back(out);
              return;
          }
          string str = dict[digits[level] - '0'];
          for(int i = 0; i < str.size(); i++){
              letterCombinationsDFS(digits, dict, level + 1, out + string(1, str[i]), res);
          }
      }
  };
  ```

- 解法2

  ```c++
  // 使用迭代Iterative来解，在遍历digits中所有的数字时，先建立一个临时的字符串数组t，然后跟上面的解法操作一样，通过数字到dict中取出字符串str，然后遍历取出字符串中的所有字符，再遍历当前结果res中的每一个字符串，将字符加到后面，并加入到临时字符串数组中。取出的字符串str遍历完成后，将临时字符数组赋值给结果res
  
  class Solution {
  public:
      vector<string> letterCombinations(string digits) {
          if(digits.empty())
              return {};
          vector<string> res{""};
          string dict[] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
          for(int i = 0; i < digits.size(); i++){
              vector<string> t;
              string str = dict[digits[i] - '0'];
              for(int j = 0; j < str.size(); j++){
                  for(string s : res)
                      t.push_back(s + str[j]);
              }
              res = t;
          }
          return res;
      }
  };
  ```
