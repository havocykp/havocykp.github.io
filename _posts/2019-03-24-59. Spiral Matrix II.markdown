---
title: "LeetCode-59. Spiral Matrix II"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Spiral Matrix II

螺旋矩阵之二
  Given a positive integer *n*, generate a square matrix filled with elements from 1 to *n*2 in spiral order.

**Example:**

```
Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
```

#### 思路

- 解法1

这道题是要按螺旋的顺序来填数，由于给定矩形是个正方形，计算环数时用 n/2来计算，若n为奇数时，此时最中间的那个点没有被算在环数里，所以最后需要单独赋值，还是下标转换问题是难点

```c++
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> res(n, vector<int>(n, 0));
        int val = 1, p = n;
        for (int i = 0; i < n / 2; ++i, p -= 2)
        {
            for (int col = i; col < i + p; ++col)
                res[i][col] = val++;
            
            for (int row = i + 1; row < i + p; ++row)
                 res[row][i + p - 1] = val++;
            
            for (int col = i + p - 2; col >= i; --col)
                res[i + p - 1][col] = val++;
            
            for (int row = i + p - 2; row > i; --row)
                res[row][i] = val++;
        }
        
        if (n % 2 != 0)
            res[n / 2][n / 2] = val;
        
        return res;
    }
};
```

- 解法2

  坐标转换法

  ```c++
  class Solution {
  public:
      vector<vector<int>> generateMatrix(int n) {
          vector<vector<int>> res(n, vector<int>(n, 0));
          int up = 0, down = n - 1, left = 0, right = n - 1, val = 1;
          while (true)
          {
              for (int j = left; j <= right; ++j)
                  res[up][j] = val++;
              if (++up > down) break;
              for (int i = up; i <= down; ++i)
                  res[i][right] = val++;
              if (--right < left) break;
              for (int j = right; j >= left; --j)
                  res[down][j] = val++;
              if (--down < up) break;
              for (int i = down; i >= up; --i)
                  res[i][left] = val++;
              if (++left > right) break;
          }
          
          return res;
      }
  };
  ```



