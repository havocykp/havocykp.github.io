---
title: "LeetCode-Two Sum"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Given an array `nums` of *n* integers, are there elements *a*, *b*, *c* in `nums` such that *a* + *b* + *c* = 0? Find all unique triplets in the array which gives the sum of zero.

**Note:**

The solution set must not contain duplicate triplets.

**Example:**

```
Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
```

#### 思路

三数之和，找出三个数且和为0，那么除了三个数全是0的情况之外，肯定会有正数和负数，还是要先fix一个数，然后去找另外两个数，只要找到两个数且和为第一个fix数的相反数就行了，如何能更有效的定位？肯定不希望遍历所有两个数的组合，所以如果数组是有序的，那么就可以用双指针以线性时间复杂度来遍历所有满足题意的两个数组合

首先对原数组进行排序，然后开始遍历排序后的数组，注意这里不是遍历到最后一个停止，而是到倒数第三个就可以了。这里可以先做个剪枝优化，就是当遍历到正数的时候就break，为啥呢？因为数组现在是有序的，如果第一个要fix的数是正数，那么后面的数字就都是正数，就永远不会出现和为0的情况。然后还要加上重复就跳过的处理，处理方法是从第二个数开始，如果和前面的数字相等，就跳过，因为不想把相同的数字fix两次。对于遍历到的数，用0减去这个fix的数得到一个target即可。用两个指针分别指向fix数字之后开始的数组首尾两个数，如果两个数和正好为target，则将这两个数和fix的数一起存入结果中。然后就是跳过重复数字的步骤，两个指针都需要检测重复数字。如果两数之和小于target，则将左边那个指针i右移一位，使得指向的数字增大一些。同理，如果两数之和大于target，则将右边那个指针j左移一位，使得指向的数字减小一些

- 解法1

  ```c++
  class Solution {
  public:
      vector<vector<int>> threeSum(vector<int>& nums) {
          vector<vector<int>> res;
          sort(nums.begin(), nums.end());
          if(!nums.empty() && nums.back() < 0)
              return {};
          for(int k = 0; k < nums.size(); k++){
              if(nums[k] > 0)
                  break;
              if(k > 0 && nums[k] == nums[k - 1])
                  continue;
              
              int target = 0 - nums[k];
              int i = k + 1, j = nums.size() - 1;
              
              while(i < j){
                  if(nums[i] + nums[j] == target){
                      res.push_back({nums[k], nums[i], nums[j]});
                      while(i < j && nums[i] == nums[i + 1])
                          ++i;
                      while(i < j && nums[j] == nums[j - 1])
                          --j;
                      ++i;
                      --j;
                  }
                  else if(nums[i] + nums[j] < target) 
                      ++i;
                  else 
                      --j;
              }
          }
          return res;
      }
  };
  ```

- 解法2

  ```c++
  // 利用set的不能包含重复项的特点来防止重复项的产生，那么就不需要检测数字是否被fix过两次
  class Solution {
  public:
      vector<vector<int>> threeSum(vector<int>& nums) {
          set<vector<int>> res;
          sort(nums.begin(), nums.end());
          if(!nums.empty() && nums.back() < 0)
              return {};
          for(int k = 0; k < nums.size(); k++){
              if(nums[k] > 0) 
                  break;
              int target = 0 - nums[k];
              int i = k + 1, j = nums.size() - 1;
              while(i < j){
                  if(nums[i] + nums[j] == target){
                      res.insert({nums[k], nums[i], nums[j]});
                      while(i < j && nums[i] == nums[i + 1])
                          ++i;
                      while(i < j && nums[j] == nums[j - 1])
                          --j;
                      ++i;
                      --j;
                  }
                  else if(nums[i] + nums[j] < target)
                      ++i;
                  else
                      --j;
              }
          }
          return vector<vector<int>> (res.begin(), res.end());
      }
  }; 
  ```
