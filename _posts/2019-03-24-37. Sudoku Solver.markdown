---
title: "LeetCode-37. Sudoku Solver"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---


------

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy **all of the following rules**:

1. Each of the digits `1-9` must occur exactly once in each row.
2. Each of the digits `1-9` must occur exactly once in each column.
3. Each of the the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.

Empty cells are indicated by the character `'.'`.

![img](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)
A sudoku puzzle...

![img](https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)
...and its solution numbers marked in red.

**Note:**

- The given board contain only digits `1-9` and the character `'.'`.
- You may assume that the given Sudoku puzzle will have a single unique solution.
- The given board size is always `9x9`.



#### 思路

求解数独，对于每个需要填写数字的格子带入1到9，每代入一个数字都判定其是否合法，如果合法就继续下一次递归，结束时把数字设回 '.'，判断新加入的数字是否合法时，只需要判定当前数字是否合法，不需要判定这个数组是否为数独数组，因为之前加进的数字都是合法的，这样可以使程序更加高效一些

```c++
class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        if(board.empty() || board.size() != 9 || board[0].size() != 9)
            return;
        solveSudokuDFS(board, 0, 0);
    }
    
    bool solveSudokuDFS(vector<vector<char> >&board, int i, int j)
    {
        if (i == 9)
            return true;
        if (j >= 9)
            return solveSudokuDFS(board, i + 1, 0);
        if (board[i][j] == '.')
        {
            for(int k = 1; k <= 9; k++)
            {
                board[i][j] = (char)(k + '0');
                if(isValid(board, i, j))
                {
                    if (solveSudokuDFS(board, i, j + 1))
                        return true;
                }
                board[i][j] = '.';
            }
        }
        else
        {
            return solveSudokuDFS(board, i, j + 1);
        }
        
        return false;
    }
    
    bool isValid(vector<vector<char> >&board, int i, int j)
    {
        for (int col = 0; col < 9; col++)
        {
            if (col != j && board[i][j] == board[i][col])
                return false;
        }
        for(int row = 0; row < 9; row++)
        {
            if (row != i && board[i][j] == board[row][j])
                return false;
        }
        for (int row = i / 3 * 3; row < i / 3 * 3 + 3; row++)
        {
            for (int col = j / 3 * 3; col < j / 3 * 3 + 3; col++)
            {
                if((row != i || col != j) && board[i][j] == board[row][col])
                    return false;
            }
        }
        
        return true;
    }
};
```

