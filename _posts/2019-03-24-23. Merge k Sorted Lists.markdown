---
title: "LeetCode-23. Merge k Sorted Lists"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Merge *k* sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

**Example:**

```
Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
```

#### 思路

合并k个有序链表，不管合并几个，基本还是要两两合并。前两个先合并，合并好了再跟第三个，然后第四个直到第k个。这样的思路是对的，但是效率不高。换一种思路，用`分治法`Divide and Conquer Approach，简单来说就是不停的对半划分，比如k个链表先划分为合并两个k/2个链表的任务，再不停的往下划分，直到划分成只有一个或两个链表的任务，开始合并。举例说明，合并6个链表，那么按照分治法，首先分别合并1和4，2和5，3和6。这样下一次只需合并3个链表，再合并1和3，最后和2合并就ok了

- 解法1

  ```c++
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* mergeKLists(vector<ListNode*>& lists) {
          if(lists.size() == 0)
              return NULL;
          int n = lists.size();
          while(n > 1){
              int k = (n + 1) / 2;
              for(int i = 0; i < n / 2; i++){
                  lists[i] = mergeTwoLists(lists[i], lists[i + k]);
              }
              n = k;
          }
          return lists[0];
      }
      
      ListNode *mergeTwoLists(ListNode *l1, ListNode *l2){
          ListNode *head = new ListNode(-1);
          ListNode *cur = head;
          while(l1 && l2){
              if(l1->val < l2->val){
                  cur->next = l1;
                  l1 = l1->next;
              }else{
                  cur->next = l2;
                  l2 = l2->next;
              }
              cur = cur->next;
          }
          if(l1) cur->next = l1;
          if(l2) cur->next = l2;
          return head->next;
      }
  };
  ```

- 解法2

  ```c++
  // 利用最小堆数据结构，首先把k个链表的首元素都加入最小堆中，它们会自动排序。然后每次取出最小的那个元素加入最后结果的链表中，然后把取出元素的下一个元素再加入堆中，下次仍从堆中取出最小的元素做相同的操作，以此类推，直到堆中没有元素，此时k个链表也合并为一个链表，返回首节点即可
  
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  struct cmp{
      bool operator()(ListNode* a, ListNode* b){
          return a->val > b->val;
      }
  };
  
  class Solution {
  public:
      ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*, vector<ListNode*>, cmp> q;
        for(int i = 0; i < lists.size(); i++){
            if(lists[i])
                q.push(lists[i]);
        }
          ListNode *head = NULL, *pre = NULL, *tmp = NULL;
          while(!q.empty()){
              tmp = q.top();
              q.pop();
              if(!pre)
                  head = tmp;
              else 
                  pre->next = tmp;
              pre = tmp;
              if(tmp->next)
                  q.push(tmp->next);
          }
          return head;
      }
      
  };
  ```
