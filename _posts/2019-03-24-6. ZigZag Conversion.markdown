---
title: "LeetCode-6. ZigZag Conversion"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

The string `"PAYPALISHIRING"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

```
P   A   H   N
A P L S I I G
Y   I   R
```

And then read line by line: `"PAHNAPLSIIGYIR"`

Write the code that will take a string and make this conversion given a number of rows:

```
string convert(string s, int numRows);
```

**Example 1:**

```
Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
```

**Example 2:**

```
Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:

P     I    N
A   L S  I G
Y A   H R
P     I
```

#### 思路

之字形字符串，比如有一个字符串"0123456789ABCDEF"，转为zigzag

当n=2时：

0  2  4  6  8  A  C  E

1  3  5  7  9  B  D  F

当n=3时：

0    4      8      C

1  3   5  7  9  B  D   F

2          6     A        E

当n=4时：

0       6             C

1     5   7        B    D  

2   4        8    A       E

3                9	          F

我们发现，除了第一行和最后一行没有中间形成之字形的数字外，其它都有，而首位两行中相邻两个元素的index之差跟函数是相关的，为2*nRows-2，根据这个特点，可以按顺序找到所有的黑色元素在元字符串的位置，将它们按顺序加到新字符串里面，对于红色元素出现的位置也是有规律的，每个红色元素的位置为j+2*nRows-2-2*i，其中，j为前一个黑色元素的列数，i为当前行数

```c++
class Solution {
public:
    string convert(string s, int numRows) {
        if(numRows <= 1)
            return s;
        string res = "";
        int size = 2 * numRows - 2;
        for(int i = 0; i < numRows; i++){
            for(int j = i; j < s.size(); j += size){
                res += s[j];
                int tmp = j + size - 2 * i;
                if(i != 0 && i != numRows - 1 && tmp < s.size())
                    res += s[tmp];
            }
        }
        return res;
    }
};
```

