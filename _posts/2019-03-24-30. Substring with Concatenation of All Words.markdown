---
title: "LeetCode-30. Substring with Concatenation of All Words"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

You are given a string, **s**, and a list of words, **words**, that are all of the same length. Find all starting indices of substring(s) in **s** that is a concatenation of each word in **words** exactly once and without any intervening characters.

**Example 1:**

```
Input:
  s = "barfoothefoobarman",
  words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoor" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
```

**Example 2:**

```
Input:
  s = "wordgoodstudentgoodword",
  words = ["word","student"]
Output: []
```

#### 思路

求串联所有单词的子串，就是说给定一个长字符串，再给定几个长度相同的单词，让找出串联给定所有单词的子串的起始位置。这里采用两个哈希表，第一个哈希表先把所有的单词存进去，然后从开头开始一个一个遍历，停止条件为当剩余字符个数小于单词集里所有字符的长度。这时候需要定义第二个哈希表，然后每次找出给定单词长度的子串，看其是否在第一个哈希表里，如果没有，则break，如果有，则加入第二个哈希表；但相同的词只能出现一次，如果多了，也break。如果正好匹配完给定单词集里所有的单词，则把 i 存入结果中

- 解法1

  ```c++
  class Solution {
  public:
      vector<int> findSubstring(string s, vector<string>& words) {
          vector<int> res;
          
          if(s.empty() || words.empty())
              return res;
          
          int n = words.size(), m = words[0].size();
          
          unordered_map<string, int> m1;
          for(auto &a : words)
              ++m1[a];
          for(int i = 0; i <= (int)s.size() - n * m; i++)
          {
              unordered_map<string, int> m2;
              int j = 0;
              
              for(j = 0; j < n; j++)
              {
                  string t = s.substr(i + j * m, m);
                  if(m1.find(t) == m1.end())
                      break;
                  ++m2[t];
                  if(m2[t] > m1[t])
                      break;
              }
              if(j == n)
                  res.push_back(i);
          }
          return res;
      }
  };
  ```

  这道题还有一种O(n)时间复杂度的解法，设计思路非常巧妙，很难想出来。这种方法不再是一个字符一个字符的遍历，而是一个词一个词的遍历，比如根据题目中的例子，字符串s的长度n为18，words数组中有两个单词(cnt = 2)，每个单词的长度len均为3，那么遍历的顺序为 0，3，6，8，12，15，然后偏移一个字符1，4，7，9，13，16，然后再偏移一个字符2，5，8，10，14，17，这样就可以把所有情况都遍历到，这里还是先用一个哈希表m1来记录words里的所有词，然后从0开始遍历，用left来记录左边界的位置，count表示当前已经匹配的单词的个数。然后一个单词一个单词的遍历，如果当前遍历到的单词t在m1中存在，那么将其加入另一个哈希表m2中，如果在m2中个数小于等于m1中的个数，那么count自增1，如果大于，需要做一些处理，比如下面这种情况，s = barfoofoo，words = {bar, foo, abc}，给words中新加一个abc，目的是为了遍历到barfoo不会停止，那么当遍历到第二个foo的时候，m2[foo] = 2, 而此时m1[foo] = 1，这时候已经不连续了，所以这时要移动左边界left的位置，先把第一个词t1=bar取出来，然后将m2[t1]自减1，如果此时m2[t1]<m1[t1]，说明一个匹配没了，那么对于的count也要自减1，然后左边界加上个len，这样就可以了。如果某个时刻count和cnt相等，说明成功匹配了一个位置，那么将当前左边界left存入结果res中，此时去掉最左边的一个词，同时count自减1，左边界右移len，继续匹配。如果匹配到一个不在m1中的词，那么说明跟前面已经断开了，需要重置m2，count为0，左边界left移到 j + len

- 解法2

  ```c++
  class Solution {
  public:
      vector<int> findSubstring(string s, vector<string>& words) {
          if(s.empty() || words.empty())
              return {};
          
          vector<int> res;
          int n = s.size(), cnt = words.size(), len = words[0].size();
          unordered_map<string, int> m1;
          for(string w : words)
              ++m1[w];
          for(int i = 0; i < len; i++)
          {
              int left = i, count = 0;
              unordered_map<string, int> m2;
              for(int j = i; j <= n - len; j += len)
              {
                  string t = s.substr(j, len);
                  if(m1.count(t))
                  {
                      ++m2[t];
                      if(m2[t] <= m1[t])
                      {
                          ++count;
                      }
                      else
                      {
                          while(m2[t] > m1[t])
                          {
                              string t1 = s.substr(left, len);
                              --m2[t1];
                              if(m2[t1] < m1[t1])
                                  --count;
                              left += len;
                          }
                      }
                      if(count == cnt)
                      {
                          res.push_back(left);
                          --m2[s.substr(left, len)];
                          --count;
                          left += len;
                      }
                  }
                  else
                  {
                      m2.clear();
                      count = 0;
                      left = j + len;
                  }
              }
          }
          return res;
      }
  };
  ```
