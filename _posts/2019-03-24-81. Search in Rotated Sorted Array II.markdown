---
title: "LeetCode-81. Search in Rotated Sorted Array II"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., `[0,0,1,2,2,5,6]` might become `[2,5,6,0,0,1,2]`).

You are given a target value to search. If found in the array return `true`, otherwise return `false`.

**Example 1:**

```
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
```

**Example 2:**

```
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
```

**Follow up:**

- This is a follow up problem to [Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/description/), where `nums`may contain duplicates.
- Would this affect the run-time complexity? How and why?

#### 思路

这道是之前那道[ Search in Rotated Sorted Array 在旋转有序数组中搜索](http://www.cnblogs.com/grandyang/p/4325648.html) 的延伸，现在数组中允许出现重复数字，这个也会影响我们选择哪半边继续搜索，由于之前那道题不存在相同值，我们在比较中间值和最右值时就完全符合之前所说的规律：**如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的**。而如果可以有重复值，就会出现来面两种情况，[3 1 1] 和 [1 1 3 1]，对于这两种情况中间值等于最右值时，目标值3既可以在左边又可以在右边，那怎么办么，对于这种情况其实处理非常简单，只要把最右值向左一位即可继续循环，如果还相同则继续移，直到移到不同值为止，然后其他部分还采用[ Search in Rotated Sorted Array 在旋转有序数组中搜索](http://www.cnblogs.com/grandyang/p/4325648.html) 中的方法

```
class Solution {
public:
    bool search(int A[], int n, int target) {
        if (n == 0) return false;
        int left = 0, right = n - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (A[mid] == target) return true;
            else if (A[mid] < A[right]) {
                if (A[mid] < target && A[right] >= target) left = mid + 1;
                else right = mid - 1;
            } else if (A[mid] > A[right]){
                if (A[left] <= target && A[mid] > target) right = mid - 1;
                else left = mid + 1;
            } else --right;
        }
        return false;
    }
};
```

解法2：

这道题目，是对[LC33](http://tianmaying.com/tutorial/LC33)的加强版，主要变难的地方在于：**序列中可能存在重复的值**，而这就带来一个问题：在二分查找中，我们很有可能无法知道究竟是该向左、还是向右？

具体来说，在LC33中，我们是通过这样的判断来知道序列究竟是有序还是经过旋转的：



```
if (nums[l] < nums[r]) {
    // 有序
}
else {
    // 两段
}
```

但是现在，就显然不能这么直接的下断论，因为有可能`l~r`的所有数都是相同的值，所以对于这样的情况，我们需要对于相等的情况进行特殊处理，即：



```
if (nums[l] < nums[r]) {
    // 有序
}
else if (nums[l] > nums[r]) {
    // 两段
}
else {
    // 特殊处理
}
```

那么该如何特殊处理呢？这个问题其实没有太多好想的……不能判断就是不能判断，简单的令`l++`，然后继续尝试吧！也正因为如此，这道题的最坏情况复杂度可能会降低到`O(n)`。

> 这道题其实就是从LC33发散而出的一道新题目，主要在于需要认清出现重复的数之后可能对已经方法造成的影响，然后对于这样的影响，用最理想的办法去解决，就可以了！

```c++
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        // 初始问题
        int l = 0, r = nums.size() - 1;
        // 不断重复来缩小问题规模
        while (l < r) {
            // 取中点，分情况讨论
            int m = (l + r) / 2;
            // 情况0
            if (target == nums[m]) return true;
            // 情况1
            if (nums[l] < nums[r]) {
                if (target > nums[m]) l = m + 1;
                if (target < nums[m]) r = m - 1;
            }
            else if (nums[l] > nums[r]) {
                // 情况2.1
                if (nums[m] >= nums[l]) {
                    if (target > nums[m] || target < nums[l]) {
                        l = m + 1;
                    }
                    else {
                        r = m - 1;
                    }
                }
                // 情况2.2
                else {
                    if (target < nums[m] || target > nums[r]) {
                        r = m - 1;
                    }
                    else {
                        l = m + 1;
                    }
                }
            }
            else {
                l ++;
            }
        }
        // 计算答案
        if (l == r && nums[l] == target) return true;
        return false;
    }
};
```

