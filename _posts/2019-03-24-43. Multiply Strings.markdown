---
title: "LeetCode-43. Multiply Strings"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

------

Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.

**Example 1:**

```
Input: num1 = "2", num2 = "3"
Output: "6"
```

**Example 2:**

```
Input: num1 = "123", num2 = "456"
Output: "56088"
```

**Note:**

1. The length of both `num1` and `num2` is < 110.
2. Both `num1` and `num2` contain only digits `0-9`.
3. Both `num1` and `num2` do not contain any leading zero, except the number 0 itself.
4. You **must not use any built-in BigInteger library** or **convert the inputs to integer** directly.

#### 思路

求两个字符串数字的相乘，输入的两个数和返回的数都是以字符串格式存储的，这样做的原因可能是这样可以计算超大数相乘，可以不受int或long的数值范围的约束，那么该如何来计算乘法呢，那就是多位数的乘法，每位相乘后错位相加，把错位相加后的结果保存到一个一维数组中，然后分别每位上算进位，最后每个数字都变成一位，然后要做的是去除掉首位0，最后把每位上的数字按顺序保存到结果中即可

```c++
class Solution {
public:
    string multiply(string num1, string num2) {
        string res;
        int n1 = num1.size(), n2 = num2.size();
        int k = n1 + n2 - 2, carry = 0;
        vector<int> v(n1 + n2, 0);
        for(int i = 0; i < n1; i++)
        {
            for(int j = 0; j < n2; j++)
            {
                v[k - i -j] += (num1[i] - '0') * (num2[j] - '0');
            }
        }
        for(int i = 0; i < n1 + n2; i++)
        {
            v[i] += carry;
            carry = v[i] / 10;
            v[i] %= 10;
        }
        int i = n1 + n2 - 1;
        while(v[i] == 0)
            --i;
        if(i < 0)
            return "0";
        while(i >= 0)
            res.push_back(v[i--] + '0');
        return res;
    }
};
```



