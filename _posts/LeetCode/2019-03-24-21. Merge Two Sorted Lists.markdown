---
title: "LeetCode-21. Merge Two Sorted Lists"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

**Example:**

```
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
```

#### 思路

混合插入有序链表，具体思想就是新建一个链表，然后比较两个链表中的元素值，把较小的那个链到新链表中，由于两个输入链表的长度可能不同，所以最终会有一个链表先完成插入所有元素，则直接另一个未完成的链表直接链入新链表的末尾

- 解法1

  ```c++
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
          ListNode *dummy = new ListNode(-1), *cur = dummy;
          while(l1 && l2){
              if(l1->val < l2->val){
                  cur->next = l1;
                  l1 = l1->next;
              }else{
                  cur->next = l2;
                  l2 = l2->next;
              }
              cur = cur->next;
          }
          cur->next = l1 ? l1 : l2;
          return dummy->next;
      }
  };
  ```

- 解法2

  ```c++
  // 递归，当某个链表为空，就返回另一个。然后核心还是比较当前两个节点值大小，如果l1的小，那么对于l1的下一个节点和l2调用递归函数，将返回值赋值给l1.next，然后返回l1;否则就对l2的下一个节点和l1调用递归函数，将返回值赋值给l2.next,然后返回l2
  
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
          if(!l1)
              return l2;
          if(!l2)
              return l1;
          if(l1->val < l2->val){
              l1->next = mergeTwoLists(l1->next, l2);
              return l1;
          }else{
              l2->next = mergeTwoLists(l1, l2->next);
              return l2;
          }
          
      }
  };
  ```

- 解法3

  ```c++
  // 递归的写法去掉了if从句
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
          if(!l1)
              return l2;
          if(!l2)
              return l1;
          ListNode *head = l1->val < l2->val ? l1 : l2;
          ListNode *nonhead = l1->val < l2->val ? l2 : l1;
          head->next = mergeTwoLists(head->next, nonhead);
          return head;
      }
  };
  ```

- 解法4

  ```c++
  // 三行搞定
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
          if(!l1 || (l2 && l1->val > l2->val))
              swap(l1, l2);
          if(l1)
              l1->next = mergeTwoLists(l1->next, l2);
          return l1;
      }
  };
  ```
