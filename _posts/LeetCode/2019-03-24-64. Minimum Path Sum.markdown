---
title: "LeetCode-64. Minimum Path Sum"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a *m* x *n* grid filled with non-negative numbers, find a path from top left to bottom right which *minimizes* the sum of all numbers along its path.

**Note:** You can only move either down or right at any point in time.

**Example:**

```c++
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
```

#### 思路

```
最小路径和，使用动态规划里做，应该算DP问题中比较简单的一类，需要维护一个二维的dp数组，其中dp[i][j]表示当前位置的最小路径和，递推式也容易写出来 dp[i][j]=grid[i][j] +min(dp[i-1][j]),难度不算大
```

#### 代码

```c++
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        int dp[m][n];
        dp[0][0] = grid[0][0];
        for(int i = 1; i < m; ++i)
            dp[i][0] = grid[i][0] + dp[i-1][0];
        for(int i = 1; i < n; ++i)
            dp[0][i] = grid[0][i] + dp[0][i-1];
        for(int i = 1; i < m; ++i)
        {
            for(int j = 1; j < n; ++j)
            {
                dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
            }
            
        }
        return dp[m-1][n-1];
    }
};
```

