---
title: "LeetCode-54. Spiral Matrix"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a matrix of *m* x *n* elements (*m* rows, *n* columns), return all elements of the matrix in spiral order.

**Example 1:**

```
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
```

**Example 2:**

```
Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
```

#### 思路

将一个矩阵按照螺旋顺序打印出来，只能一条边一条边的打印，首先要从给定的矩阵中算出按螺旋顺序有几个环，注意最终的环可以是一个数字，也可以是一行或者一列。环数的计算公式是min(m, n)/2，知道了环数，就可以对每个环的边按顺序打印，此题的难点在于下标的转换，如何正确的转换下标是解此题的关键

```c++
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty())
            return {};
        int m = matrix.size(), n = matrix[0].size();
        vector<int> res;
        int c = m > n ? (n + 1) / 2 : (m + 1) / 2;
        int p = m, q = n;
        for (int i = 0; i < c; i++, p -= 2, q -= 2)
        {
            for (int col = i; col < i + q; col++)
            
                res.push_back(matrix[i][col]);
            
            
            for (int row = i + 1; row < i + p; row++)
            
                res.push_back(matrix[row][i + q - 1]);
                
            if (p == 1 || q == 1) break;
            for (int col = i + q - 2; col >= i; col--)
                
                res.push_back(matrix[i + p - 1][col]);
                
                
            for (int row = i + p - 2; row > i; row--)
                
                res.push_back(matrix[row][i]);
        }
        return res;
    }
};
```



如果觉得上面解法中的下标转换难弄的话。可以使用下面这种坐标稍稍简洁一些的方法，对于这种螺旋遍历的方法，重要的是要确定上下左右四条边的位置，那么初始化的时候，上边就是0，下边就是m-1，左边是0，右边是n-1，然后进行while循环，先遍历上边，将所有元素加入结果res，然后上边下移一位，如果此时上边大于下边，说明此时已经遍历完成了，直接break。同理对于下边，左边，右边，依次进行相对应的操作，这样就会使得坐标很有规律，并且不易出错。

```c++
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty())
            return {};
        int m = matrix.size(),  n = matrix[0].size();
        vector<int> res;
        int up = 0, down = m - 1, left = 0,  right = n - 1;
        
        while (true)
        {
            for (int j = left; j <= right; j++)
            
                res.push_back(matrix[up][j]);
            if (++up > down) 
                break;
            for (int i = up; i <= down; i++)
                res.push_back(matrix[i][right]);
            if (--right < left)
                break;
            for (int j = right; j >= left; j--)
                res.push_back(matrix[down][j]);
            if (--down < up)
                break;
            for (int i = down; i >= up; i--)
                res.push_back(matrix[i][left]);
            if (++left > right)
                break;
            
        }
        
        return res;
    }
};
```



