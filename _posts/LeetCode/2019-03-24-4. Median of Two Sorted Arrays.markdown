---
title: "LeetCode-4. Median of Two Sorted Arrays"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description



There are two sorted arrays **nums1** and **nums2** of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume **nums1** and **nums2** cannot be both empty.

**Example 1:**

```
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
```

**Example 2:**

```
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
```

#### 思路

这道题让求两个有序数组的中位数，而且限制了时间复杂度为 O(log(m+n)),看到这个时间复杂度，自然而然地想到了应该使用二分查找法求解。但是这道题被定义为Hard也是有其原因的，难点就在于两个未合并的有序数组之间使用二分法，如果这道题只有一个有序数组，让求中位数，那应该就是个Easy题。那么这里还是要使用二分法，而且是在两个数组之间使用，（中位数的定义，如果某个有序数组长度是 奇数，那么中位数就是最中间的那个，如果是偶数，那么就是最中间两个数字的平均值），这里对于两个有序数组也是一样的，假设有两个有序数组的长度分别为m和n，由于两个数组长度之和m+n的奇偶不确定，因此需要分情况来讨论

对于奇数的情况，直接找到最中间的数即可，偶数的话需要求最中间两个数的平均值。为了简化代码，不分情况讨论，使用一个小技巧，分别找第 （m+n+1）/2个和（m+n+2）/2个，然后求其平均值即可，这对奇偶数均适用。加入m+n为奇数的话，那么其实(m+n+1)/2和(m+n+2)/2的值相等，相当于两个相同的数字相加再除以2，还是其本身

定义一个函数在两个有序数组中找到第K个元素，该如何实现找到第K个元素？

首先，为了避免产生新的数组从而增加时间复杂度，使用两个变量i和j分别来标记数组nums1和nums2的起始位置。然后来处理一些细节，比如当某一个数组的起始位置大于等于其数组长度时，说明其所有数字均已经被淘汰，相当于一个空数组，那么实际上就变成了在另一个数组中找数字，直接就可以找出来。还有就是如果K=1，那么只要比较nums1和nums2的起始位置i和j的数字就可以了。难点在于一般的情况怎么处理？因为需要在两个有序数组中找到第K个元素，为了加快搜索的速度，使用二分法，那么对谁二分呢，数组么？其实要对K二分，意思是我们需要分别在nums1和nums2中查找第k/2个元素，注意这里由于两个数组的长度不定，所以有可能某个数组没有第k/2个数字，所以需要先检查一下，数组中到底存不存在第k/2个数字，如果存在就就取出来，否则就赋值上一个整型最大值。如果某个数组没有第k/2个数字，那么就淘汰另一个数字的前k/2个数字即可。有没有可能两个数组都不存在第k/2个数字呢，这道题是不可能的，因为我们的k不是任意给的，而是给的m+n的中间值，所以必定至少会有一个数组是存在第k/2个数字的。最后就是二分法核心，比较这两个数组的第k/2小的数字midVal1和midVal2的大小，如果第一个数组的第k/2个数字小，那么说明要找的数字肯定不在nums1中的前k/2个数字中，所以将其淘汰，将nums1的起始位置向后移动k/2个，并且此时的k也自减去k/2，调用递归。反之，淘汰，nums2中的前k/2个数字，并将nums2的起始位置向后移动k/2个，并且此时的k也自减去k/2，调用递归即可

- 解法1

  ```c++
  class Solution {
  public:
      double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
          int m = nums1.size(), n = nums2.size(), left = (m+n+1)/2, right = (m+n+2)/2;
          return (findKth(nums1, 0, nums2, 0, left) + findKth(nums1, 0, nums2, 0, right))/2.0;
      }
      
      int findKth(vector<int>& nums1, int i, vector<int>& nums2, int j, int k){
          if(i >= nums1.size())
              return nums2[j+k-1];
          if(j >= nums2.size())
              return nums1[i+k-1];
          if(k == 1)
              return min(nums1[i], nums2[j]);
          
          int midVal1 = (i+k/2-1 < nums1.size()) ? nums1[i+k/2-1] : INT_MAX;
          int midVal2 = (j+k/2-1 < nums2.size()) ? nums2[j+k/2-1] : INT_MAX;
          
          if(midVal1 < midVal2){
              return findKth(nums1, i+k/2, nums2, j, k-k/2);
          }
          else{
              return findKth(nums1, i, nums2, j+k/2, k-k/2);
          }
      }
  };
  ```

- 解法2

  ```c++
  // 解法1使用的是原数组，同时使用了两个变量来分别标记当前的起始位置。当然也可以直接生成新的数组，这样就不用起始位置变量了，不过拷贝数组的操作可能会增加时间复杂度，也许会超出限制，不过就算当个思路拓展吧，首先判断数组是否为空，为空的话，直接在另一个数组找第K个即可。还有一种情况是当K=1时，表示要找第一个元素，只要比较两个数组的第一个元素，返回较小的那个即可。这里分别取出两个数组的第k/2个数字的位置坐标i和j，为了避免数组没有第k/2个数组的情况，每次都和数组长度做比较，取出较小值。这里跟上面的解法有些许不同，上面的解法直接取出的是值，而这里取出的是位置坐标，不同在于，上面解法中每次固定淘汰k/2个数字，而这里由于取出了合法的i和j，所以每次淘汰i或j个。也可以让j=k-i
  
  class Solution {
  public:
      double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
          int m = nums1.size(), n = nums2.size();
          return (findKth(nums1, nums2, (m+n+1)/2) + findKth(nums1, nums2, (m+n+2)/2))/2.0;
      }
      
      int findKth(vector<int> nums1, vector<int> nums2, int k){
          if(nums1.empty())
              return nums2[k-1];
          if(nums2.empty())
              return nums1[k-1];
          if(k==1)
              return min(nums1[0], nums2[0]);
          int i = min((int)nums1.size(), k/2), j = min((int)nums2.size(), k/2);
          if(nums1[i-1] > nums2[j-1]){
              return findKth(nums1, vector<int>(nums2.begin() + j, nums2.end()), k - j);
          }
          else{
              return findKth(vector<int> (nums1.begin() + i, nums1.end()), nums2, k-i);
          }
          return 0;
      }
  };
  ```

- 解法3

  ```c++
  // 使用迭代形式的二分搜索法求解
  class Solution {
  public:
      double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
          int m = nums1.size(), n = nums2.size();
          if(m < n)
              return findMedianSortedArrays(nums2, nums1);
          if(n == 0)
              return ((double)nums1[(m-1)/2] + (double)nums1[m/2])/2.0;
          int left = 0, right = n * 2;
          while(left <= right){
              int mid2 = (left + right) / 2;
              int mid1 = m + n - mid2;
              double L1 = mid1 == 0 ? INT_MIN : nums1[(mid1 - 1) / 2];
              double L2 = mid2 == 0 ? INT_MIN : nums2[(mid2 - 1) / 2];
              double R1 = mid1 == m * 2 ? INT_MAX : nums1[mid1 / 2];
              double R2 = mid2 == n * 2 ? INT_MAX : nums2[mid2 / 2];
              if(L1 > R2)
                  left = mid2 + 1;
              else if (L2 > R1)
                  right = mid2 - 1;
              else 
                  return (max(L1, L2) + min(R1, R2)) / 2;
          }
          return -1;
      }
      
  };
  ```

