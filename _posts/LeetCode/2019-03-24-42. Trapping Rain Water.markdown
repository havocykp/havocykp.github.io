---
title: "LeetCode-42. Trapping Rain Water"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given *n* non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

![img](https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png)
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. **Thanks Marcos** for contributing this image!

**Example:**

```
Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
```

#### 思路

收集雨水的题，一种方法是基于动态规划Dynamic Programming的，需要维护一个一维的dp数组，这个DP算法需要遍历两遍数组，第一遍遍历dp[i]中存入i位置左边的最大值，然后开始第二遍遍历数组，第二次遍历时找右边最大值，然后和左边最大值比较取其中的较小值，然后跟当前值A[i]相比，如果大于当前值，则将差值存入结果

解法1：

```c++
class Solution {
public:
    int trap(vector<int>& height) {
        int res = 0, mx = 0, n = height.size();
        vector<int> dp(n, 0);
        for(int i = 0; i < n; i++)
        {
            dp[i] = mx;
            mx = max(mx, height[i]);
        }
        mx = 0;
        for(int i = n - 1; i >= 0; i--)
        {
            dp[i] = min(dp[i], mx);
            mx =max(mx, height[i]);
            if(dp[i] > height[i])
                res += dp[i] - height[i];
        }
        return res;
    }
};
```

解法2

只需要遍历一次即可解决，这个算法需要left和right两个指针分别指向数组的首尾位置，从两边向中间扫描，在当前两指针确定的范围内，先比较两头找出的最小值，如果较小值是left指向的值，则从左向右扫描，如果较小值是right指向的值，则从右向左扫描，若遇到的值比当前较小值小，则将差值存入结果，如遇到的值大，则重新确定新的窗口范围，以此类推直至left和right指针重合

```c++
class Solution {
public:
    int trap(vector<int>& height) {
        int res = 0, l = 0, r = height.size() - 1;
        while(l < r)
        {
            int mn = min(height[l], height[r]);
            
            if(mn == height[l])
            {
                ++l;
                while(l < r && height[l] < mn)
                {
                    res += mn - height[l++];
                }
            }
            else
            {
                --r;
                while(l < r && height[r] < mn)
                {
                    res += mn - height[r--];
                }
            }
        }
        return res;
    }
};
```

解法3

对上面的代码进行优化

```c++
class Solution {
public:
    int trap(vector<int>& height) {
        int l = 0, r = height.size() - 1, level = 0, res = 0;
        while(l < r)
        {
            int lower = height[(height[l] < height[r]) ? l++ : r--];
            level = max(level, lower);
            res += level - lower;
        }
        return res;   
    }
};
```

解法4

用stack来做，做法是遍历高度，如果此时栈为空，或者当前高度小于等于栈顶高度，则把当前高度的坐标压入栈，注意不能直接把高度压入栈，而是把坐标压入栈，这样方便后面算水平距离。当遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。此时栈里至少有一个高度，如果只有一个的话，那么不能形成坑，直接跳过，如果多余一个的话，那么此时把栈顶元素取出来当作坑，新的栈顶元素就是左边界，当前高度是右边界，只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界左边再减1，二者相乘就是盛水量

```c++
class Solution {
public:
    int trap(vector<int>& height) {
        stack<int> st;
        int i = 0, res = 0, n = height.size();
        while(i < n)
        {
            if(st.empty() || height[i] <= height[st.top()])
            {
                st.push(i++);
            }
            else
            {
                int t = st.top();
                st.pop();
                if(st.empty())
                    continue;
                res += (min(height[i], height[st.top()]) - height[t]) * (i - st.top() - 1);
            }
        }
        return res;
    }
};
```

