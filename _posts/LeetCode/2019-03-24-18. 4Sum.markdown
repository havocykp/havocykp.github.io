---
title: "LeetCode-18. 4Sum"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Given an array `nums` of *n* integers and an integer `target`, are there elements *a*, *b*, *c*, and *d* in `nums` such that *a* + *b* + *c* + *d* = `target`? Find all unique quadruplets in the array which gives the sum of `target`.

**Note:**

The solution set must not contain duplicate quadruplets.

**Example:**

```
Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
```

#### 思路

LeetCode中关于数字之和还有其它几道，分别是TwoSum两数之和，3Sum三数之和，3Sum Closest最近三数之和，虽然难度在递增，但是整体套路是一样的，在这里为了避免重复项，使用STL中的set，其特点是不能有重复，如果新加入的数在set中原本就存在的话，插入操作就会失败，这样能很好的避免重复项的存在

```c++
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        set<vector<int>> res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < int(nums.size() - 3); i++){
            for(int j = i + 1; j < int(nums.size() - 2); j++){
                if(j > i + 1 && nums[j] == nums[j - 1])
                    continue;
                int left = j + 1, right = nums.size() - 1;
                while(left < right){
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if(sum == target){
                        vector<int> out{nums[i], nums[j], nums[left], nums[right]};
                        res.insert(out);
                        ++left;
                        --right;
                    }else if(sum < target)
                        ++left;
                    else
                        --right;
                }
            }
        }
        return vector<vector<int>> (res.begin(), res.end());
    }
};
```

