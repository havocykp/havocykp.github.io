---
title: "LeetCode-34. Find First and Last Position of Element in Sorted Array"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

------

Given an array of integers `nums` sorted in ascending order, find the starting and ending position of a given `target` value.

Your algorithm's runtime complexity must be in the order of *O*(log *n*).

If the target is not found in the array, return `[-1, -1]`.

**Example 1:**

```
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
```

**Example 2:**

```
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
```



#### 思路

这道题让在一个有序整数数组中寻找相同目标值的起始和结束位置，而且限定了时间复杂度为O(logn)，这是典型的二分查找法的时间复杂度，所以这里也需要使用此方法，思路是首先对原数组使用二分查找法，找出其中一个目标值的位置，然后向两边搜索找出起始和结束的位置



- 解法1

  ```c++
  class Solution {
  public:
      vector<int> searchRange(vector<int>& nums, int target) {
          int idx = search(nums, 0, nums.size() - 1, target);
          if(idx == -1)
              return {-1, -1};
          int left = idx, right = idx;
          while(left > 0 && nums[left -1] == nums[idx])
              --left;
          while(right < nums.size() - 1 && nums[right + 1] == nums[idx])
              ++right;
          return {left, right};
      }
      
      int search(vector<int>& nums, int left, int right, int target)
      {
          if (left > right)
              return -1;
          int mid = left + (right - left) / 2;
          if(nums[mid] == target)
              return mid;
          else if(nums[mid] < target)
              return search(nums, mid + 1, right, target);
          else 
              return search(nums, left, mid - 1, target);
      }
  };
  ```

  可能有些人会觉得上面的算法不是严格意义上的O(logn)的算法，因为在最坏的情况下会变成O(n)，比如当数组里的数全是目标值的话，从中间向两边找边界就会一直遍历完整个数组，使用两次二分查找法，第一次找到左边界，第二次调用找到右边界即可

- 解法2

  ```c++
  class Solution {
  public:
      vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2, -1);
          int left = 0, right = nums.size() - 1;
          while(left < right)
          {
              int mid = left + (right - left) / 2;
              if(nums[mid] < target)
                  left = mid + 1;
              else 
                  right = mid;
          }
          
          if (nums[right] != target)
              return res;
          
          res[0] = right;
          right = nums.size();
          
          
          while(left < right)
          {
              int mid = left + (right - left) / 2;
              if(nums[mid] <= target)
                  left = mid + 1;
              else
                  right = mid;
          }
          
          res[1] = left - 1;
          return res;
      }
  };
  ```
