---
title: "LeetCode-22. Generate Parentheses"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

Given *n* pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given *n* = 3, a solution set is:

```
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
```

#### 思路

这道题给定一个数字n，让生成公有n个括号的所有正确的形式，对于这种列出所有结果的题首先还是考虑用递归Recursion来解，由于字符串只有左括号和右括号两种字符，而且最终结果必定是左括号3个，右括号3个，所以定义两个变量left和right分别表示剩余左右括号的个数，如果在某次递归时，左括号的个数大于右括号的个数，如果在某次递归时，左括号的个数大于右括号的个数，说明此时生成的字符串中右括号的个数大于左括号的个数，即会出现')('这样的非法串，所以这种情况直接返回，不继续处理。如果left和right都为0，则说明此时生成的字符串已有3个左括号和3个右括号，且字符串合法，则存入结果中后返回。如果以上两种情况都不满足，若此时left大于0，则调用递归函数，注意参数的更新，若right大于0，则调用递归函数，同样要更新参数

- 解法1

```c++
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        generateParenthesisDFS(n, n, "", res);
        return res;
    }
    
    void generateParenthesisDFS(int left, int right, string out, vector<string>& res){
        if(left > right)
            return;
        if(left == 0 && right == 0)
            res.push_back(out);
        else{
            if(left > 0)
                generateParenthesisDFS(left - 1, right, out + '(', res);
            if(right > 0)
                generateParenthesisDFS(left, right - 1, out + ')', res);
        }
    }
};
```

- 解法2

  ```c++
  // 另一种方法，CareerCup书上给的方法，这种方法的思想是找左括号，每找到一个左括号，就在其后面加一个完整的括号，最后在开头加一个(),就形成了所有的情况，需要注意的是，有时候会出现重复的情况，所以用set数据结构，好处是如果遇到重复项，不会加入到结果中，最后再把set转为vector即可
  // n = 1: ()
  // n = 2: (()) ()()
  // n = 3: (()()) ((())) ()(()) (())() ()()()
  
  class Solution {
  public:
      vector<string> generateParenthesis(int n) {
          set<string> t;
          if(n == 0)
              t.insert("");
          else{
              vector<string> pre = generateParenthesis(n - 1);
              for(auto a : pre){
                  for(int i = 0; i < a.size(); i++){
                      if(a[i] == '('){
                          a.insert(a.begin() + i + 1, '(');
                          a.insert(a.begin() + i + 2, ')');
                          t.insert(a);
                          a.erase(a.begin() + i + 1, a.begin() + i + 3);
                      }
                  }
                  t.insert("()" + a);
              }
          }
          return vector<string>(t.begin(), t.end());
      }
  
  };
  ```

