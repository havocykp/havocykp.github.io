---
title: "LeetCode-26. Remove Duplicates from Sorted Array"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

Given a sorted array *nums*, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each element appear only *once* and return the new length.

Do not allocate extra space for another array, you must do this by **modifying the input array in-place** with O(1) extra memory.

**Example 1:**

```
Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
```

**Example 2:**

```
Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
```

**Clarification:**

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by **reference**, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

```
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
```



#### 思路

从有序数组中去除重复项，数组的值可以通过下标直接访问，而链表不行。使用快慢指针来记录遍历的坐标，最开始时两个指针都指向第一个数字，如果两个指针所指的数字相同，则快指针向前走一步，如果不同，则两个指针都向前走一步，这样当快指针走完整个数组后，慢指针当前的坐标加1就是数组中不同数字的个数



- 解法1

  ```c++
  class Solution {
  public:
      int removeDuplicates(vector<int>& nums) {
          if(nums.empty())  
              return 0;
          int pre = 0, cur = 0, n = nums.size();
          while(cur < n)
          {
              if(nums[pre] == nums[cur])
                  ++cur;
              else
                  nums[++pre] = nums[cur++];
          }
          return pre + 1;
      }
  };
  ```

- 解法2

  ```c++
  // 用for循环
  
  class Solution {
  public:
      int removeDuplicates(vector<int>& nums) {
          if(nums.empty())
              return 0;
          int j = 0, n = nums.size();
          for(int i = 0; i < n; i++)
          {
              if(nums[i] != nums[j])
                  nums[++j] = nums[i];
          }
          
          return j + 1;
      }
  };
  ```
