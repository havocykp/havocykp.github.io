---
title: "LeetCode-56. Merge Intervals"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a collection of intervals, merge all overlapping intervals.

**Example 1:**

```
Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
```

**Example 2:**

```
Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
```

#### 思路

- 解法1

合并区间，首先要做的就是给区间集排序，由于要排序的是个结构体，所以要定义自己的comparator，才能用sort来排序，以start的值从小到大来排序，排完序就可以开始合并了，首先把第一个区间存入结果中，然后从第二个开始遍历区间集，如果结果中最后一个区间和遍历的当前区间无重叠，直接将当前区间的end值更新为结果中最后一个区间的end和当前end值之中的较大值，然后继续遍历区间集，以此类推可以得到最终结果

```c++
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if (intervals.empty())
            return {};
        sort(intervals.begin(), intervals.end(), [](Interval &a, Interval &b){return a.start < b.start;});
        vector<Interval> res{intervals[0]};
        for (int i = 1; i < intervals.size(); i++)
        {
            if (res.back().end < intervals[i].start)
            {
                res.push_back(intervals[i]);
            }
            else
            {
                res.back().end = max(res.back().end, intervals[i].end);
            }
        }
        return res;
    }
};
```

- 解法2

  下面这种解法将起始位置和结束位置分别存到了两个不同的数组starts和ends中，然后分别进行排序，之后用两个指针i和j，初始化时分别指向starts 和 ends 数组的首位置，然后如果i指向starts数组中的最后一个位置，或者当starts数组上i+1位置上的数字大于ends数组的i位置上的数时，此时说明区间已经不连续了

  ```c++
  /**
   * Definition for an interval.
   * struct Interval {
   *     int start;
   *     int end;
   *     Interval() : start(0), end(0) {}
   *     Interval(int s, int e) : start(s), end(e) {}
   * };
   */
  class Solution {
  public:
      vector<Interval> merge(vector<Interval>& intervals) {
         int n = intervals.size();
          vector<Interval> res;
          vector<int> starts, ends;
          for (int i = 0; i < n; i++)
          {
              starts.push_back(intervals[i].start);
              ends.push_back(intervals[i].end);
          }
          
          sort(starts.begin(), starts.end());
          sort(ends.begin(), ends.end());
          for (int i = 0, j = 0; i < n; i++)
          {
              if (i == n - 1 || starts[i + 1] > ends[i])
              {
                  res.push_back(Interval(starts[j], ends[i]));
                  j = i + 1;
              }
          }
          
          return res;    
      }
  };
  ```

- 解法3

  由于插入的过程中也有合并的操作，所以可以建立一个空的集合，然后把区间集的每一个区间当作一个新的区间插入结果中，也可以得到合并后的结果

  ```C++
  /**
   * Definition for an interval.
   * struct Interval {
   *     int start;
   *     int end;
   *     Interval() : start(0), end(0) {}
   *     Interval(int s, int e) : start(s), end(e) {}
   * };
   */
  class Solution {
  public:
      vector<Interval> merge(vector<Interval>& intervals) {
          vector<Interval> res;
          for (int i = 0; i < intervals.size(); i++)
          {
              res = insert(res, intervals[i]);
          }
          
          return res;
      }
      
      vector<Interval> insert(vector<Interval>& intervals, Interval newInterval)
      {
          vector<Interval> res;
          int n = intervals.size(), cur = 0;
          for (int i = 0; i < n; i++)
          {
              if (intervals[i].end < newInterval.start)
              {
                  res.push_back(intervals[i]);
                  ++cur;
              }
              else if (intervals[i].start > newInterval.end)
              {
                  res.push_back(intervals[i]);
              }
              else 
              {
                  newInterval.start = min(newInterval.start, intervals[i].start);
                  newInterval.end = max(newInterval.end, intervals[i].end);
              }
          }
          
          res.insert(res.begin() + cur, newInterval);
          return res;
      }
  };
  ```
