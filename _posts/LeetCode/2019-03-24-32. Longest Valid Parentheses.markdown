---
title: "LeetCode-32. Longest Valid Parentheses"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Given a string containing just the characters `'('` and `')'`, find the length of the longest valid (well-formed) parentheses substring.

**Example 1:**

```
Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"
```

**Example 2:**

```
Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"
```

#### 思路

最长有效括号 比之前那道 Valid Parentheses验证括号难度要大一些，这里还是借助栈来求解，需要定义个start变量来记录合法括号串的起始位置，然后遍历字符串，如果遇到左括号，则将当前下标压入栈，如果遇到右括号，如果当前栈为空，则将下一个坐标位置记录到start，如果栈不为空，则将栈顶元素取出，此时若栈为空，则更新结果和 i - start + 1中的较大值，否则更新结果和 i - 栈顶元素中的较大值

- 解法

  ```c++
  class Solution {
  public:
      int longestValidParentheses(string s) {
          int res = 0, start = 0;
          
          stack<int> m;
          for(int i = 0; i < s.size(); i++)
          {
              if(s[i] == '(')
                  m.push(i);
              else if(s[i] == ')')
              {
                  if(m.empty())
                      start = i + 1;
                  else
                  {
                      m.pop();
                      res = m.empty() ? max(res, i - start + 1) : max(res, i - m.top());
                  }
              }
          }
          return res;
      }
  };
  ```
