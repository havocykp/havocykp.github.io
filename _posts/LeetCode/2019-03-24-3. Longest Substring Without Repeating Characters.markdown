---
title: "LeetCode-3. Longest Substring Without Repeating Characters"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Given a string, find the length of the **longest substring** without repeating characters.

**Example 1:**

```
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
```

**Example 2:**

```
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
```

**Example 3:**

```c++
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
```

#### 思路

这道求`最长无重复子串`，给了一个字符串，让求最长的无重复字符的子串，注意这里是`子串`,不是子序列，所以必须是连续的，先不考虑代码实现，如果是Example 1，手动找无重复字符的子串，该怎么找？最应该想到的就是一个字符一个字符的遍历，比如 a,b,c 然后又出现一个 a，那么此时就应该去掉第一次出现的a，然后继续往后，又出现了一个 b，则应该去掉第一次出现的b，以此类推，最终发现最长的长度是3。所以，需要记录之前出现过的字符，记录的方式有很多，最常见的是统计字符出现的个数，但是这道题字符出现的位置很重要，所以可以使用HashMap来建立字符和其出现位置之间的映射。进一步考虑，由于字符会重复出现，到底是保存所有出现的位置呢，还是只记录一个位置？

之前手动推导的方法实际上是维护了一个滑动窗口，窗口内都是没有重复的字符，需要尽可能的扩大窗口的大小，。由于窗口在不停向右滑动，所以这里只关心每个字符最后出现的位置，并建立映射。窗口的右边界就是当前遍历到的字符的位置，为了求出窗口的大小，需要一个变量left来指向滑动窗口的左边界，这样，如果当前遍历到的字符从未出现过，那么直接扩大右边界，如果之前出现过，那么就分两种情况，在或不在滑动窗口内，如果不在滑动窗口内，那么就没事，当前字符可以加进来；如果在，就需要先在滑动窗口内去掉这个已经出现过的字符，去掉的方法并不需要将左边界left一位一位向右遍历查找，由于HashMap已经保存了该重复字符最后出现的位置，所以直接移动left指针就可以。维护一个结果res，每次用出现过的窗口大小来更新结果res，就可以得到最终结果

这里建立一个256位大小的整型数组来代替HashMap，这样做的原因是ASCII表共能表示256个字符，所以可以记录所有字符，然后定义两个遍历res和left，其中res用来记录最长无重复子串的长度，left指向该无重复子串左边的起始位置，然后遍历整个字符串，对于每一个遍历到的字符，如果哈希表中该字符串对应的值为0，说明没有遇到过该字符，则此时计算最长无重复子串，i - left + 1，其中 i 是最长无重复子串最右边的位置，left是最左边的位置，还有一种情况也需要计算最长无重复子串，就是当哈希表中的值小于left，这是由于此时出现过重复的字符，left的位置更新了，如果又遇到新的字符，就要重新计算最长无重复子串。最后每次都要在哈希表中将当前字符对应的值赋值为 i + 1



- 解法1

  ```c++
  class Solution {
  public:
      int lengthOfLongestSubstring(string s) {
          int m[256] = {0}, res = 0, left = 0;
          for(int i = 0; i < s.size(); i++){
              if(m[s[i]] == 0 || m[s[i]] < left){
                  
                  res = max(res, i - left + 1);
              }
              else{
                  left = m[s[i]];
              }
              m[s[i]] = i + 1;
          }
          return res;
      }
  };
  
  // 解释程序中if条件语句中为啥要有 m[s[i]] < left,举例说明，当输入字符串为"abbca"的时候，当i=4时，也就是即将要开始遍历最后一个字母a时，此时哈希表中a对应1，b对应3，c对应4，left为2，即当前最长的子字符串的左边界为第2个b的位置，而第一个a已经不在当前最长的字符串的范围内了，那么对于i=4这个新进来的a，应该要加入结果中，而此时未被更新的哈希表中a为1，不是0，如果不判断它和left的关系，就无法更新结果，那么答案就会少一位
  ```

- 解法2

  ```c++
  class Solution {
  public:
      int lengthOfLongestSubstring(string s) {
          vector<int> m(256, -1);
          int res = 0, left = -1;
          for(int i = 0; i < s.size(); i++){
              left = max(left, m[s[i]]);
              m[s[i]] = i;
              res = max(res, i - left);
          }
          return res;
      }
  };
  ```

- 解法3

  ```c++
  // 使用set，将出现过的字符都放入set中，遇到set中没有的字符就加入set中并更新结果res，如果遇到重复的，则从左边开始删除字符，直到删除重复的字符为止
  class Solution {
  public:
      int lengthOfLongestSubstring(string s) {
          int res = 0, left = 0, i = 0, n = s.size();
          unordered_set<char> t;
          while(i < n){
              if(!t.count(s[i])){
                  t.insert(s[i++]);
                  res = max(res, (int)t.size());
              }
              else{
                  t.erase(s[left++]);
              }
          }
          return res;
      }
  };
  ```

- 解法4

  ```c++
  // 使用HashMap这个数据结构建立字符和最后出现位置之间的映射
  class Solution {
  public:
      int lengthOfLongestSubstring(string s) {
          int res = 0, left = 0, i = 0, n = s.size();
          unordered_map<char, int> m;
          for(int i = 0; i < n; i++){
              left = max(left, m[s[i]]);
              m[s[i]] = i + 1;
              res = max(res, i - left + 1);
          }
          return res;
      }
  };
  ```
