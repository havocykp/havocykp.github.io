---
title: "LeetCode-69. Sqrt(x)"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Implement `int sqrt(int x)`.

Compute and return the square root of *x*, where *x* is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

**Example 1:**

```
Input: 4
Output: 2
```

**Example 2:**

```
Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.
```

### 思路

解法1：

这道题要求求平方根，能想到的方法就是算一个候选值的平方，然后和x比较大小，为了缩短查找时间，采用二分搜索法来找平方根，找最后一个不大于目标值的数

```c++
class Solution {
public:
    int mySqrt(int x) {
        if (x <= 1)
            return x;
        int left = 0, right = x;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (x / mid >= mid)
                left = mid + 1;
            else 
                right = mid;
        }
        return right - 1;
    }
};
```



解法2：

另一种解法，是利用[牛顿迭代法](http://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95)，是用逼近法求方程根的神器，因为要求x2 = n的解，令f(x)=x2-n，相当于求解f(x)=0的解，递推式：xi+1=xi - (xi2 - n) / (2xi) = xi - xi / 2 + n / (2xi) = xi / 2 + n / 2xi = (xi + n/xi) / 2

```C++
class Solution {
public:
    int mySqrt(int x) {
       if (x == 0)
           return 0;
        double res = 1, pre = 0;
        while (abs(res - pre) > 1e-6) {
            pre = res;
            res = (res + x / res) / 2;
        }
        return int(res);
    }
};
```



解法3：

也是牛顿迭代法，写法更加简洁一些，注意为了防止越界，声明为长整型

```c++
class Solution {
public:
    int mySqrt(int x) {
        long res = x;
        while (res * res > x) {
            res = (res + x / res) / 2;
        }
        return res;
    }
};
```

