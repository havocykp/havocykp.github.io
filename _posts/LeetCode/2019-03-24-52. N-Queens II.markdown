---
title: "LeetCode-52. N-Queens II"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

The *n*-queens puzzle is the problem of placing *n* queens on an *n*×*n* chessboard such that no two queens attack each other.

![img](https://assets.leetcode.com/uploads/2018/10/12/8-queens.png)

Given an integer *n*, return the number of distinct solutions to the *n*-queens puzzle.

**Example:**

```
Input: 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.
[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
```

#### 思路

这道题是之前那道N皇后问题的延申，说是延申其实我觉得两者顺序应该颠倒一样，上一道题比这道题还要稍微复杂一点，两者本质上没有区别，都需要用回溯法求解，如果理解了之前那道题的思路，此题只要做很小的改动即可，不再需要求出具体的皇后的摆法，只需要每次生成一种解法时，计数器加一即可。

```c++
class Solution {
public:
    int totalNQueens(int n) {
        int res = 0;
        vector<int> pos(n, -1);
        totalNQueensDFS(pos, 0, res);
        return res;
    }
    
    void totalNQueensDFS(vector<int> &pos, int row, int &res)
    {
        int n = pos.size();
        if (row == n) ++res;
        else
        {
            for (int col = 0; col <  n; col++)
            {
                if (isValid(pos, row, col))
                {
                    pos[row] = col;
                    totalNQueensDFS(pos, row + 1, res);
                    pos[row] = -1;
                }
            }
        }
    }
    
    bool isValid(vector<int> &pos, int row, int col)
    {
        for (int i = 0; i < row; i++)
        {
            if (col == pos[i] || abs(row - i) == abs(col - pos[i]))
            {
                return false;
            }
        }
        return true;
    }
};
```

