---
title: "LeetCode-12. Integer to Roman"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

```
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
```

For example, two is written as `II` in Roman numeral, just two one's added together. Twelve is written as, `XII`, which is simply `X` + `II`. The number twenty seven is written as `XXVII`, which is `XX` + `V` + `II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

- `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 
- `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 
- `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.

**Example 1:**

```
Input: 3
Output: "III"
```

**Example 2:**

```
Input: 4
Output: "IV"
```

**Example 3:**

```
Input: 9
Output: "IX"
```

**Example 4:**

```
Input: 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.
```

**Example 5:**

```
Input: 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
```



#### 思路

整数转化成罗马数字，例如Example5的罗马数字为 MCMXCIV，不难发现，千位，百位，十位和个位上的数分别用罗马数字表示。1000-M，400-CD，30-XXX，7-VII，所以要做的就是用取商法分别提取各个位上的数字，然后分别表示出来

- 解法1

  ```c++
  class Solution {
  public:
      string intToRoman(int num) {
         string res = "" ;
          char roman[] = {'M', 'D', 'C', 'L', 'X', 'V', 'I'};
          int value[] = {1000, 500, 100, 50, 10, 5, 1};
          
          for(int n = 0; n < 7; n += 2){
              int x = num / value[n];
              if(x < 4){
                  for(int i = 1; i <= x; i++)
                      res += roman[n];
              }
              else if(x == 4)
                  res = res + roman[n] + roman[n-1];
              else if(x > 4 && x < 9){
                  res += roman[n-1];
                  for(int i = 6; i <= x; i++)
                      res += roman[n];
              }
              else if(x == 9)
                  res = res + roman[n] + roman[n-2];
              num %= value[n];
          }
          return res;
      }
  };
  ```

- 解法2

  ```c++
  // 利用贪婪算法，建立一个数表，每次通过查表找出当前最大的数，减去再继续查表
  
  class Solution {
  public:
      string intToRoman(int num) {
         string res = "" ;
         vector<int> val{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
         vector<string> str{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
         for(int i = 0; i < val.size(); i++){
             while(num >= val[i]){
                 num -= val[i];
                 res += str[i];
             }
         }
          return res;
      }
  };
  ```

- 解法3

  ```c++
  // 投机取巧方法，把所有的情况都列出来，然后直接按位查表，O(1)的时间复杂度
  
  class Solution {
  public:
      string intToRoman(int num) {
          string res = "";
          vector<string> v1{"", "M", "MM", "MMM"};
          vector<string> v2{"", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"};
          vector<string> v3{"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"};
          vector<string> v4{"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
          
          return v1[num / 1000] + v2[(num % 1000) / 100] + v3[(num % 100) / 10] + v4[num % 10];
      }
  };
  ```
