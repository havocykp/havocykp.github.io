---
title: "LeetCode-11. Container With Most Water"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Given *n* non-negative integers *a1*, *a2*, ..., *an* , where each represents a point at coordinate (*i*, *ai*). *n* vertical lines are drawn such that the two endpoints of line *i* is at (*i*, *ai*) and (*i*, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

**Note:** You may not slant the container and *n* is at least 2.

 

![img](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg)

The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

 

**Example:**

```
Input: [1,8,6,2,5,4,8,3,7]
Output: 49
```



#### 思路

求装最多水的容器，需要定义i和j两个指针分别指向数组的左右两端，然后两个指针向中间搜索，每移动一次算一个值和结果比较取较大的，容器装水量的算法是找出左右两个边缘中较小的那个乘以两边缘的距离

- 解法1

  ```c++
  class Solution {
  public:
      int maxArea(vector<int>& height) {
          int res = 0, i = 0, j = height.size() - 1;
          while(i < j){
              res = max(res, min(height[i], height[j]) * (j - i));
              height[i] < height[j] ? ++i : --j;
          }
          return res;
      }
  };
  ```

- 解法2

  ```c++
  // 优化，对于相同的高度直接移动i和j就行
  class Solution {
  public:
      int maxArea(vector<int>& height) {
          int res = 0, i = 0, j = height.size() - 1;
          while(i < j){
              int h = min(height[i], height[j]);
              res = max(res, h * (j - i));
              while(i < j && h == height[i])
                  ++i;
              while(i < j && h == height[j])
                  --j;
          }
          return res;
      }
  };
  ```
