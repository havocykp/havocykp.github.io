---
title: "LeetCode-16. 3Sum Closest"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Given an array `nums` of *n* integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.

**Example:**

```
Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
```

#### 思路

这道题让求最接近给定值的三数之和，返回这个最接近于给定值的值，即要保证当前三个数和给定值之间的差的绝对值最小，所以需要定义一个变量diff用来记录差的绝对值，然后先将数组排序，接着遍历数组，思路和求三数之和很相似，都是先确定一个数，然后用两个指针left和right来滑动寻找另外两个数，每确定两个数，求出此三数之和，然后算和给定值的差的绝对值存在newDiff中，然后和diff比较并更新diff和结果closest

```c++
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int closest = nums[0] + nums[1] + nums[2];
        int diff = abs(closest - target);
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; i++){
            int left = i + 1, right = nums.size() - 1;
            while(left < right){
                int sum = nums[i] + nums[left] + nums[right];
                int newDiff = abs(sum - target);
                if(diff > newDiff){
                    diff = newDiff;
                    closest = sum;
                }
                if(sum < target)
                    ++left;
                else
                    --right;
            }
        }
        return closest;
    }
};
```

