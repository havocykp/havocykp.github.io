---
title: "LeetCode-Two Sum"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

**Example 1:**

```
Input: [1,3,5,6], 5
Output: 2
```

**Example 2:**

```
Input: [1,3,5,6], 2
Output: 1
```

**Example 3:**

```
Input: [1,3,5,6], 7
Output: 4
```

**Example 4:**

```
Input: [1,3,5,6], 0
Output: 0
```

------



    #### 思路
    
    只需要遍历一遍原数组，若当前数字大于或等于目标值，则返回当前坐标，如果遍历结束了，说明目标值比数组中任何一个数都要大，则返回数组长度n即可



    - 解法1
    
      ```c++
      class Solution {
      public:
          int searchInsert(vector<int>& nums, int target) {
              for(int i = 0; i < nums.size(); i++)
              {
                  if (nums[i] >= target)
                      return i;
              }
              return nums.size();
          }
      };
      ```
    
    - 解法2
    
      ```c++
      // 使用二分搜索法优化时间复杂度
      
      class Solution {
      public:
          int searchInsert(vector<int>& nums, int target) {
             if(nums.back() < target)
                 return nums.size();
              int left = 0, right = nums.size() - 1 ;
              
              while(left < right)
              {
                  int mid = left + (right - left) / 2;
                  if (nums[mid] == target)
                      return mid;
                  else if (nums[mid] < target)
                      left = mid + 1;
                  else 
                      right = mid;
              }
              return right;   
          }
                 
      };
      ```



​      
