---
title: "LeetCode-62. Unique Paths"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

A robot is located at the top-left corner of a *m* x *n* grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

![img](https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png)
Above is a 7 x 3 grid. How many possible unique paths are there?

**Note:** *m* and *n* will be at most 100.

**Example 1:**

```
Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
```

**Example 2:**

```
Input: m = 7, n = 3
Output: 28
```

#### 思路

- 解法1

和爬梯子问题一样，每次可以向下走或者向右走，求到达最右下角的所有不同走法的个数，需要用动态规划来解，需要维护一个二维数组dp，其中dp[i][j]表示当前位置不同的走法的个数，然后可以递推为：dp[i][j] = dp[i - 1][j] + d[i][j-1], 为了节省空间，使用一维数组dp，一行一行的刷新

```c++
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> dp(n, 1);
        for (int i = 1; i < m; i++)
        {
            for (int j = 1; j < n; j++)
            {
                dp[j] += dp[j - 1];
            }
        }
        
        return dp[n - 1];
    }
};
```



- 解法2

  一种很数学的解法，实际相当于机器人总共走了 m + n - 2 步，其中m-1步向下走，n-1步向右走，那么总共不同的方法个数就相当于在步数里面 m-1和n-1中较小的那个数的取法，实际上是一道组合数的问题

  ```c++
  class Solution {
  public:
      int uniquePaths(int m, int n) {
         double num = 1, denom = 1;
          int small = m > n ? n : m;
          for (int i = 1; i <= small - 1; i++)
          {
              num *= m + n - 1 - i;
              denom *=  i;
          }
          
          return (int)(num / denom);
      }
  };
  ```
