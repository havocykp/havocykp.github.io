---
title: "LeetCode-61. Rotate List"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a linked list, rotate the list to the right by *k* places, where *k* is non-negative.

**Example 1:**

```
Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
```

**Example 2:**

```
Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL
```

#### 思路

旋转链表的题，因为链表的值不能通过下标来访问，只能一个一个的走，拿到这道题首先想到的就是用快慢指针来解，快指针先走k步，然后两个指针一起走，当快指针走到末尾时，慢指针的下一个位置是新的顺序的头结点，这样就可以旋转链表了，这样放到oj上，会出现很多特殊情况，首先一个就是当原链表为空时，直接返回NULL，还有就是当k大于链表长度和k远远大于链表长度时该如何处理，需要首先遍历一遍原链表得到链表长度n，然后k对n取余，这样k肯定小于n，就可以用上面的算法了

- 解法1

  ```c++
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* rotateRight(ListNode* head, int k) {
          if (!head) return NULL;
          int n = 0;
          ListNode *cur = head;
          while (cur)
          {
              ++n;
              cur = cur->next;
          }
          k %= n;
          ListNode *fast = head, *slow = head;
          for (int i = 0; i < k; i++)
          {
              if (fast) fast = fast->next;
          }
          if (!fast) return head;
          while (fast->next)
          {
              fast = fast->next;
              slow = slow->next;
          }
          fast->next = head;
          fast = slow->next;
          slow->next = NULL;
          return fast;
      }
  };
  ```

- 解法2

  和上面的方法类似，但是不用快慢指针，一个指针就够了，原理是先遍历整个链表获得链表长度n，然后此时把链表头和尾链接起来，再往后走n-k%n 个结点就到达新链表的头结点前一个点，这时断开链表即可

  ```C++
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode* rotateRight(ListNode* head, int k) {
          if (!head) return NULL;
          int n = 1;
          ListNode *cur = head;
          while (cur->next)
          {
              ++n;
              cur = cur->next;
          }
          cur->next = head;
          int m = n - k % n;
          for (int i = 0; i < m; i++)
          {
              cur = cur->next;
          }
          ListNode *newhead = cur->next;
          cur->next = NULL;
          return newhead;
      }
  };
  ```
