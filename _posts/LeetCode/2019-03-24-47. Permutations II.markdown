---
title: "LeetCode-47. Permutations II"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

**Example:**

```
Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
```

#### 思路

全排列，由于输入数组有可能出现重复数字，如果按照之前的算法运算，会有重复排列产生，我们要避免重复产生，在递归函数中要判断前面一个数和当前的数是否相等，如果相等，前面的数必须已经使用了，即对应的visited中的值为1，当前的数字才能使用，否则需要跳过，这样就不会产生重复排列了

- 解法1

```c++
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> out;
        vector<int> visited(nums.size(), 0);
        sort(nums.begin(), nums.end());
        permuteUniqueDFS(nums, 0, visited, out, res);
        return res;
        
    }
    
    void permuteUniqueDFS(vector<int> &nums, int level, vector<int> &visited, vector<int> &out, vector<vector<int>> &res)
    {
        if (level >= nums.size())
            res.push_back(out);
        else
        {
            for (int i = 0; i < nums.size(); i++)
            {
                if (visited[i] == 0)
                {
                    if (i > 0 && nums[i] == nums[i - 1] && visited[i - 1] == 0)
                        continue;
                    visited[i] = 1;
                    out.push_back(nums[i]);
                    permuteUniqueDFS(nums, level + 1, visited, out, res);
                    out.pop_back();
                    visited[i] = 0;
                }
            }
        }
    }
};
```

- 解法2

  在Permutations的基础上稍加修改，利用set保存结果，利用其不会有重复项的特点，然后再递归函数中的swap的地方，判断如果i和start不相同，但是nums[i]和nums[start]相同的情况下跳过，继续下一个循环

  ```c++
  class Solution {
  public:
      vector<vector<int>> permuteUnique(vector<int>& nums) {
          set<vector<int>> res;
          permute(nums, 0, res);
          return vector<vector<int>> (res.begin(), res.end());
      }
      
      void permute(vector<int> &nums,  int start, set<vector<int>> &res)
      {
          if (start >= nums.size())
              res.insert(nums);
          for (int i = start; i < nums.size(); i++)
          {
              if (i != start && nums[i] == nums[start]) 
                  continue;
              swap(nums[i], nums[start]);
              permute(nums, start + 1, res);
              swap(nums[i], nums[start]);
          }
      }
  };
  ```

