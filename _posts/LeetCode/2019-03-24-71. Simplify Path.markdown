---
title: "LeetCode-71. Simplify Path"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given an **absolute path** for a file (Unix-style), simplify it. Or in other words, convert it to the **canonical path**.

In a UNIX-style file system, a period `.` refers to the current directory. Furthermore, a double period `..` moves the directory up a level. For more information, see: [Absolute path vs relative path in Linux/Unix](https://www.linuxnix.com/abslute-path-vs-relative-path-in-linuxunix/)

Note that the returned canonical path must always begin with a slash `/`, and there must be only a single slash `/` between two directory names. The last directory name (if it exists) **must not** end with a trailing `/`. Also, the canonical path must be the **shortest** string representing the absolute path.

 

**Example 1:**

```
Input: "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
```

**Example 2:**

```
Input: "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
```

**Example 3:**

```
Input: "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.
```

**Example 4:**

```
Input: "/a/./b/../../c/"
Output: "/c"
```

**Example 5:**

```
Input: "/a/../../b/../c//.//"
Output: "/c"
```

**Example 6:**

```
Input: "/a//b////c/d//././/.."
Output: "/a/b/c"
```

#### 思路

这道题让简化给定的路径，光根据题目中给的那一个例子还真不太好总结出规律，应该再加上两个例子 path = `"/a/./b/../c/"`, => `"/a/c"和path = "/a/./b/c/", => "/a/b/c"， 这样我们就可以知道中间是"."的情况直接去掉，是".."时删掉它上面挨着的一个路径，而下面的边界条件给的一些情况中可以得知，如果是空的话返回"/"，如果有多个"/"只保留一个。那么我们可以把路径看做是由一个或多个"/"分割开的众多子字符串，把它们分别提取出来一一处理即可`

C++解法1：

```c++
class Solution {
public:
    string simplifyPath(string path) {
        vector<string> v;
        int i = 0;
        while(i < path.size()) {
            while(path[i] == '/' && i < path.size())
                ++i;
            if(i == path.size())
                break;
            
            int start = i;
            while(path[i] != '/' && i < path.size())
                ++i;
            
            int end = i - 1;
            string s = path.substr(start, end - start + 1);
            if(s == "..") {
                if(!v.empty())
                    v.pop_back();
            }
            else if(s != ".") {
                v.push_back(s);
            }
            
        }
        if(v.empty())
            return "/";
        string res;
        for(int i = 0; i < v.size(); ++i) {
            res += '/' + v[i];
        }
        return res;
    }
};
```



解法2：

C++中也有专门处理字符串的机制，我们可以使用stringstream来分隔字符串，然后对每一段分别处理，思路和上面的方法相似

```C++
class Solution {
public:
    string simplifyPath(string path) {
        string res, t;
        stringstream ss(path);
        vector<string> v;
        while(getline(ss, t, '/')) {
            if(t == "" || t == ".")
                continue;
            if(t == ".." && !v.empty())
                v.pop_back();
            else if(t != "..")
                v.push_back(t);
        }
        
        for(string s : v) 
            res += "/" + s;
        return res.empty() ? "/" : res;
    }
};
```





