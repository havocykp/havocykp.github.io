---
title: "LeetCode-13. Roman to Integer"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

```
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
```

For example, two is written as `II` in Roman numeral, just two one's added together. Twelve is written as, `XII`, which is simply `X` + `II`. The number twenty seven is written as `XXVII`, which is `XX` + `V` + `II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:

- `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 
- `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 
- `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

**Example 1:**

```
Input: "III"
Output: 3
```

**Example 2:**

```
Input: "IV"
Output: 4
```

**Example 3:**

```
Input: "IX"
Output: 9
```

**Example 4:**

```
Input: "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
```

**Example 5:**

```
Input: "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
```

#### 思路

罗马数转化成数字问题，这道题的好处就在于没有让验证输入字符串是不是罗马数字，这样省掉不少功夫。用map数据结构，将罗马数字的字母转化为对应的整数值，因为输入的一定是罗马数字，那么只需要考虑两种情况：

1. 如果当前数字是最后一个数字，或者之后的数字比它小，则加上当前数字
2. 其它情况则减去这个数字

- 解法1

  ```c++
  class Solution {
  public:
      int romanToInt(string s) {
          int res = 0;
          unordered_map<char, int> m{{'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}};
          for(int i = 0; i < s.size(); i++){
              int val = m[s[i]];
              if(i == s.size() - 1 || m[s[i+1]] <= m[s[i]])
                  res += val;
              else
                  res -= val;
          }
          return res;
      }
  };
  ```

- 解法2

  ```c++
  // 每次跟前面的数字比较，如果小于等于前面的数字，先加上当前的数字，如果大于前面的数字，加上当前的数字减去2倍前面的数字，这样可以把在上一个循环多加的数减掉
  
  class Solution {
  public:
      int romanToInt(string s) {
          int res = 0;
          unordered_map<char, int> m{{'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}};
          for(int i = 0; i < s.size(); i++){
              if(i == 0 || m[s[i]] <= m[s[i - 1]])
                  res += m[s[i]];
              else
                  res += m[s[i]] - 2 * m[s[i - 1]];
          }
          return res;
      }
  };
  ```
