---
title: "LeetCode-51. N-Queens"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

The *n*-queens puzzle is the problem of placing *n* queens on an *n*×*n* chessboard such that no two queens attack each other.

![img](https://assets.leetcode.com/uploads/2018/10/12/8-queens.png)

Given an integer *n*, return all distinct solutions to the *n*-queens puzzle.

Each solution contains a distinct board configuration of the *n*-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space respectively.

**Example:**

```
Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.
```

#### 思路

经典的N皇后问题，基本所有的算法书中都会包含的问题，经典解法为回溯递归，一层一层的向下扫描，需要用到一个pos数组，其中pos[i]表示第i行皇后的位置，初始化为 -1，然后从第0开始递归，每一行都一次遍历各列，判断如果在该位置放置皇后会不会有冲突，以此类推，当到最后一行的皇后放好后，一种解法就生成了，将其存入结果res中，然后继续完成搜索所有的情况



```c++
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string> > res;
        vector<int> pos(n, -1);
        solveNQueensDFS(pos, 0, res);
        return res;
    }
    
    void solveNQueensDFS(vector<int> &pos, int row, vector<vector<string> > &res)
    {
        int n = pos.size();
        if (row == n)
        {
            vector<string> out(n, string(n, '.'));
            for (int i = 0; i < n; i++)
            {
                out[i][pos[i]] = 'Q';
            }
            res.push_back(out);
        }
        else
        {
            for (int col = 0; col < n; col++)
            {
                if (isValid(pos, row, col))
                {
                    pos[row] = col;
                    solveNQueensDFS(pos, row + 1, res);
                    pos[row] = -1;
                }
            }
        }
        
    }
    
    bool isValid(vector<int> &pos, int row, int col)
    {
        for (int i = 0; i < row; i++)
        {
            if (col == pos[i] || abs(row - i) == abs(col - pos[i]))
            {
                return false;
            }
        }
        return true;
    }
};

```

