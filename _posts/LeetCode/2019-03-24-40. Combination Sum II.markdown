---
title: "LeetCode-40. Combination Sum II"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sums to `target`.

Each number in `candidates` may only be used **once** in the combination.

**Note:**

- All numbers (including `target`) will be positive integers.
- The solution set must not contain duplicate combinations.

**Example 1:**

```
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
```

** 2:**

```
Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]
```

#### 思路

这道题和之前 Combination Sum组合之和 本质没有区别，只需要改动一点点即可，之前那道题给定数组中的数字可以重复利用，而这道题不允许，只需要在之前的基础上修改两个地方即可，首先在递归的for循环里加上if(i > start && num[i] == num[i - 1]) continue; 这样可以防止res 中出现重复项，然后就在递归调用 combinationSum2DFS里面的参数换成i +1,这样就不会重复使用数组中的数字了

```c++
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& num, int target) {
        vector<vector<int>> res;
        vector<int> out;
        sort(num.begin(), num.end());
        combinationSum2DFS(num, target, 0, out ,res);
        return res;
    }
    
    void combinationSum2DFS(vector<int>& num, int target, int start, vector<int>& out, vector<vector<int>>& res)
    {
        if(target < 0)
            return;
        else if(target == 0)
            res.push_back(out);
        else
        {
            for (int i = start; i < num.size(); i++)
            {
                if(i > start && num[i] == num[i - 1])
                    continue;
                out.push_back(num[i]);
                combinationSum2DFS(num, target - num[i], i + 1, out, res);
                out.pop_back();
            }
        }
    }
};
```

