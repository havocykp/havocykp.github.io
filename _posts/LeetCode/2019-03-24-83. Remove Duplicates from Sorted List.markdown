---
title: "LeetCode-83. Remove Duplicates from Sorted List"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Given a sorted linked list, delete all duplicates such that each element appear only *once*.

**Example 1:**

```
Input: 1->1->2
Output: 1->2
```

**Example 2:**

```
Input: 1->1->2->3->3
Output: 1->2->3
```

#### 思路

方法1：

这道题让移除给定有序链表的重复项，那么可以遍历这个链表，每个结点和其后面的结点比较，如果结点值相同了，只要将前面结点的next指针跳过紧挨着的相同值的结点，指向后面一个结点。这样遍历下来，所有重复的结点都会被跳过，留下的链表就是没有重复项的了

```C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode *cur = head;
        while(cur && cur->next){
            if(cur->val == cur->next->val){
                cur->next = cur->next->next;
            }else{
                cur = cur->next;
            }
        }
        return head;
    }
};
```

方法2：

也可以使用递归的方法来做，首先判断是否至少有两个结点，若不是的话，直接返回head。否则对head->next调用递归函数，并赋值给head->next。这里可能比较晕，我们先看后面一句，返回的时候，head结点先跟其身后的结点进行比较，如果值相同，那么返回后面的一个结点，当前的head结点就被跳过了，而如果不同的话，还是返回head结点。我们发现了，进行实质上的删除操作是在最后一句进行了，再来看第二句，我们对head后面的结点调用递归函数，那么就应该假设返回来的链表就已经没有重复项了，此时接到head结点后面，再第三句的时候再来检查一下head是否又重复了，实际上递归一直走到了末尾结点，再不断的回溯回来，进行删除重复结点

```c++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
       if(!head || !head->next)
           return head;
        head->next = deleteDuplicates(head->next);
        return (head->val == head->next->val) ? head->next : head;
    }
};
```



