---
title: "LeetCode-50. Pow(x, n)"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Implement [pow(*x*, *n*)](http://www.cplusplus.com/reference/valarray/pow/), which calculates *x* raised to the power *n* (xn).

**Example 1:**

```
Input: 2.00000, 10
Output: 1024.00000
```

**Example 2:**

```
Input: 2.10000, 3
Output: 9.26100
```

**Example 3:**

```
Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
```

**Note:**

- -100.0 < *x* < 100.0
- *n* is a 32-bit signed integer, within the range [−231, 231 − 1]

Accepted

265,945

Submissions

984,708

#### 思路

求x的n次方，如果只是简单的用两个for循环让x乘以自己n次的话，那就没什么意义了。为了优化算法，可以用递归来折半计算，每次把n缩小一半，这样n最终会缩小到0，任何数的0次方都为1，这是再往回乘，如果此时n是偶数，直接把上次递归得到的值算个平方返回即可，如果是奇数，则还需要乘上个x的值。n有可能为负数，对于n是负数的情况，可以先用其绝对值计算出一个结果再取其倒数即可

```c++
class Solution {
public:
    double myPow(double x, int n) {
        if (n < 0)
            return 1 / power(x, -n);
        return power(x, n);
    }
    
    double power(double x, int n)
    {
        if (n == 0) return 1;
        double half = power(x, n / 2);
        if (n % 2 == 0) return half * half;
        return x * half * half;
    }
};
```



- 解法2

  只用一个函数即可，再每次递归中处理n的正负，然后做相应的变换即可

  ```c++
  class Solution {
  public:
      double myPow(double x, int n) {
          if (n == 0) return 1;
          double half =myPow(x, n / 2);
          if (n % 2 == 0) return half * half;
          else if (n > 0) return half * half * x;
          else return half * half / x;
      }
  };
  ```

