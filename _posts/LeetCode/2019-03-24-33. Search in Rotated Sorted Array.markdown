---
title: "LeetCode-33. Search in Rotated Sorted Array"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

#### Description

------

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`).

You are given a target value to search. If found in the array return its index, otherwise return `-1`.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of *O*(log *n*).

**Example 1:**

```
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
```

**Example 2:**

```
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
```

#### 思路

这道题让在旋转数组中搜索一个给定值，若存在，返回坐标；若不存在，返回-1。考虑二分搜索法，但是这道题的难点在于不知道原数组在哪旋转了，分析题目给定的例子，对于数组[0  1  2   4  5  6  7]，总共有7种旋转方法

0		1		2		`4`		`5`		`6`		`7`

7		0		1		`2`		`4`		`5`		`6`

6		7		0		`1`		`2`		`4`		`5`

5		6		7		`0`		`1`		`2`		`4`

`4`		`5`		`6`		`7`		0		1		2

`2` 		`4`		`5`		`6`		7		0		1

`1`		`2`		`4`		`5`		6		7 		0



二分搜索法的关键在于获得了中间数后，判断下面要搜索左半段还是右半段，观察上面有标注的数字都是升序，由此可以看出，如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的，只要在有序的半段里用首尾两个数组来判断目标值是否在这一区域内，这样就可以确定保留哪半边了



- 解法

  ```c++
  class Solution {
  public:
      int search(vector<int>& nums, int target) {
          int left = 0, right = nums.size() - 1;
          while(left <= right)
          {
              int mid = left + (right - left) / 2;
              if(nums[mid] == target)
                  return mid;
              else if(nums[mid] < nums[right])
              {
                  if(nums[mid] < target && nums[right] >= target)
                      left = mid + 1;
                  else
                      right = mid - 1;
              }
              else
              {
                  if(nums[left] <= target && nums[mid] > target)
                      right = mid - 1;
                  else
                      left = mid + 1;
              }
          }
          return -1;
      }
  };
  ```
