---
title: "LeetCode-10. Regular Expression Matching"
layout: post
date: 2019-03-24 23:02
image: 
headerImage: false
tag:
- Algorithm
- LeetCode
category: blog
author: NoThxJ
description: LeetCode
---

Regular Expression Matching

正则表达式匹配

#### Description

------

Given an input string (`s`) and a pattern (`p`), implement regular expression matching with support for `'.'` and `'*'`.

```
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
```

The matching should cover the **entire** input string (not partial).

**Note:**

- `s` could be empty and contains only lowercase letters `a-z`.
- `p` could be empty and contains only lowercase letters `a-z`, and characters like `.` or `*`.

**Example 1:**

```
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
```

**Example 2:**

```
Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
```

**Example 3:**

```
Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
```

**Example 4:**

```
Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches "aab".
```

**Example 5:**

```
Input:
s = "mississippi"
p = "mis*is*p*."
Output: false
```

#### 思路

若p为空，s也为空，返回true，反之返回false

若p的长度为1，s的长度也为1，且相同或是p为'.'，则返回true，否则返回false

若p的第二个字符不为*，若此时s为空返回false，否则判断首字符是否匹配，且从各自的第二个字符开始调用递归函数匹配

若p的第二个字符为*，若s不为空且字符匹配，调用递归函数匹配s和去掉前两个字符的p，若匹配返回true，否则s去掉首字母

返回调用递归函数匹配s和去掉前两个字符的p的结果

- 解法1

  ```c++
  class Solution {
  public:
      bool isMatch(string s, string p) {
          if(p.empty())
              return s.empty();
          if(p.size() == 1){
              return (s.size() == 1 && (s[0] == p[0] || p[0] == '.'));
          }
          if(p[1] != '*'){
              if(s.empty())
                  return false;
              return (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1), p.substr(1));
          }
          while(!s.empty() && (s[0] == p[0] || p[0] == '.')){
              if(isMatch(s, p.substr(2)))
                  return true;
              s = s.substr(1);
          }
          return isMatch(s, p.substr(2));
      }
  };
  ```

- 解法2

  ```c++
  // 先判断p是否为空，若为空则根据s的为空的情况返回结果。当p的第二个字符为*号时，由于*号前面的字符的个数可以任意，可以为0，那么先用递归来调用为0的情况，就是直接把这两个字符去掉再比较，或者当s不为空，且第一个字符和p的第一个字符相同时，再对去掉首字符的s和p调用递归，注意p不能去掉首字符，因为*号前面的字符可以有无限个；如果第二个字符不为*号，那么就比较第一个字符，然后对后面的字符串调用递归
  
  class Solution {
  public:
      bool isMatch(string s, string p) {
          if(p.empty())
              return s.empty();
          if(p.size() > 1 && p[1] == '*'){
              return isMatch(s, p.substr(2)) || (!s.empty() && (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1), p));
          }
          else{
              return !s.empty() && (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1), p.substr(1));
          }
      }
  };
  ```

- 解法3

  ```c++
  // 用DP来解，定义一个二维的DP数组，其中dp[i][j],表示s[0, i)和p[0,j)是否match，然后有下面3种情况
  1. p[i][j] = p[i-1][j-1],if p[j-1]!='*' && (s[i-1]==p[j-1]||p[j-1]=='.')
  2. p[i][j] = p[i][j-2], if p[j-1]=='*' and then pattern repeats for 0 times
  3. p[i][j] = p[i-1][j]&&(s[i-1] == p[j-2]||p[j-2]=='.'),if p[j-1]=='*' and the pattern repeats for at least 1 times
  
  
  class Solution {
  public:
      bool isMatch(string s, string p) {
          int m = s.size(), n = p.size();
          vector<vector<bool>> dp(m+1, vector<bool>(n+1, false));
          dp[0][0] = true;
          for(int i = 0; i <= m; i++){
              for(int j = 1; j <= n; j++){
                  if(j > 1 && p[j-1] == '*'){
                      dp[i][j] = dp[i][j-2] || (i > 0 && (s[i-1] == p[j-2] || p[j-2] == '.') && dp[i-1][j]);
                  }
                  else{
                      dp[i][j] = i > 0 && dp[i-1][j-1] && (s[i-1] == p[j-1] || p[j-1] == '.');
                  }
              }
          }
          return dp[m][n];
      }
  };
  ```
